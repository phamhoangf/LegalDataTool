#!/usr/bin/env python3
"""
Hybrid similarity checker for legal questions
Uses semantic search + BM25 for optimal accuracy
"""

import re
import json
from typing import List, Dict, Any, Tuple, Optional
from hybrid_search import HybridSearchEngine, create_hybrid_search_engine

class QuestionSimilarityChecker:
    """
    Ki·ªÉm tra t∆∞∆°ng ƒë·ªìng c√¢u h·ªèi s·ª≠ d·ª•ng Hybrid Search (BM25 + Semantic)
    """
    
    def __init__(self, 
                 similarity_threshold: float = 0.75,
                 hybrid_config: Optional[Dict[str, Any]] = None):
        """
        Args:
            similarity_threshold: Ng∆∞·ª°ng t∆∞∆°ng ƒë·ªìng (0-1), > threshold = t∆∞∆°ng ƒë·ªìng
            hybrid_config: Configuration for hybrid search engine
        """
        self.similarity_threshold = similarity_threshold
        
        print(f"üß† Initializing hybrid similarity checker with threshold {similarity_threshold}")
        self.hybrid_engine = create_hybrid_search_engine(hybrid_config)
        
        self.existing_questions = []
        
    def preprocess_text(self, text: str) -> List[str]:
        """
        Ti·ªÅn x·ª≠ l√Ω vƒÉn b·∫£n ti·∫øng Vi·ªát
        """
        if not text:
            return []
            
        # Chuy·ªÉn th∆∞·ªùng
        text = text.lower()
        
        # Lo·∫°i b·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát, gi·ªØ l·∫°i ch·ªØ c√°i, s·ªë v√† kho·∫£ng tr·∫Øng
        text = re.sub(r'[^\w\s]', ' ', text)
        
        # Lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a
        text = re.sub(r'\s+', ' ', text).strip()
        
        # T√°ch t·ª´ ƒë∆°n gi·∫£n (split by space)
        words = text.split()
        
        # Lo·∫°i b·ªè t·ª´ d·ª´ng ƒë∆°n gi·∫£n
        stop_words = {
            'l√†', 'c·ªßa', 'v√†', 'c√≥', 'trong', 'v·ªõi', 'theo', 'ƒë·ªÉ', 'ƒë∆∞·ª£c', 'c√°c', 
            'm·ªôt', 'n√†y', 'ƒë√≥', 'nh·ªØng', 't·ª´', 'tr√™n', 'd∆∞·ªõi', 'v·ªÅ', 'cho', 'hay',
            'b·∫±ng', 'nh∆∞', 'khi', 'n√†o', 'g√¨', 'ai', 'ƒë√¢u', 'sao', 'bao', 'nhi·ªÅu'
        }
        
        words = [word for word in words if word not in stop_words and len(word) > 1]
        
        return words
    
    def update_corpus(self, questions_data: List[Dict[str, Any]]):
        """
        C·∫≠p nh·∫≠t corpus v·ªõi c√°c c√¢u h·ªèi hi·ªán c√≥ trong database
        
        Args:
            questions_data: List c√°c dict ch·ª©a c√¢u h·ªèi v√† metadata
        """
        self.existing_questions = []
        question_texts = []
        question_ids = []
        
        for item in questions_data:
            # L·∫•y c√¢u h·ªèi t·ª´ content
            if isinstance(item.get('content'), str):
                content = json.loads(item['content'])
            else:
                content = item.get('content', {})
            
            question = content.get('question', '')
            if question:
                question_obj = {
                    'id': item.get('id'),
                    'question': question,
                    'data_type': item.get('data_type'),
                    'content': content
                }
                self.existing_questions.append(question_obj)
                question_texts.append(question)
                question_ids.append(item.get('id'))
        
        if self.existing_questions:
            # Use hybrid search engine
            print(f"üß† Building hybrid search index with {len(self.existing_questions)} questions")
            self.hybrid_engine.index_documents(question_texts, question_ids)
            print(f"‚úÖ Updated similarity corpus with {len(self.existing_questions)} questions")
        else:
            print("üìö No existing questions found - similarity checking disabled")
    
    def find_similar_questions(self, new_question: str, top_k: int = 5) -> List[Tuple[Dict, float]]:
        """
        T√¨m c√°c c√¢u h·ªèi t∆∞∆°ng ƒë·ªìng v·ªõi c√¢u h·ªèi m·ªõi
        
        Args:
            new_question: C√¢u h·ªèi m·ªõi c·∫ßn ki·ªÉm tra
            top_k: S·ªë l∆∞·ª£ng c√¢u h·ªèi t∆∞∆°ng ƒë·ªìng nh·∫•t tr·∫£ v·ªÅ
            
        Returns:
            List[Tuple[Dict, float]]: (question_data, similarity_score)
        """
        if not self.existing_questions:
            return []
        
        if not new_question or not new_question.strip():
            return []
        
        results = []
        
        # Use hybrid search
        search_results = self.hybrid_engine.search(
            new_question, 
            top_k=top_k, 
            return_scores=True,
            adaptive_weighting=True
        )
        
        for result in search_results:
            # Find question object by ID
            question_obj = None
            for q in self.existing_questions:
                if q['id'] == result['doc_id']:
                    question_obj = q
                    break
            
            if question_obj:
                results.append((question_obj, result['combined_score']))
        
        return results
    
    def is_duplicate(self, new_question: str) -> Tuple[bool, List[Tuple[Dict, float]]]:
        """
        Ki·ªÉm tra xem c√¢u h·ªèi m·ªõi c√≥ tr√πng l·∫∑p v·ªõi c√¢u h·ªèi hi·ªán c√≥ kh√¥ng
        
        Args:
            new_question: C√¢u h·ªèi m·ªõi c·∫ßn ki·ªÉm tra
            
        Returns:
            Tuple[bool, List]: (is_duplicate, similar_questions)
        """
        similar_questions = self.find_similar_questions(new_question, top_k=3)
        
        # Ki·ªÉm tra c√≥ c√¢u h·ªèi n√†o v∆∞·ª£t ng∆∞·ª°ng kh√¥ng
        is_duplicate = any(score >= self.similarity_threshold for _, score in similar_questions)
        
        return is_duplicate, similar_questions
    
    def check_batch_similarity(self, new_questions: List[str]) -> List[Dict[str, Any]]:
        """
        Ki·ªÉm tra t∆∞∆°ng ƒë·ªìng cho m·ªôt batch c√¢u h·ªèi
        
        Args:
            new_questions: List c√°c c√¢u h·ªèi m·ªõi
            
        Returns:
            List[Dict]: K·∫øt qu·∫£ ki·ªÉm tra cho t·ª´ng c√¢u h·ªèi
        """
        results = []
        
        for i, question in enumerate(new_questions):
            is_dup, similar = self.is_duplicate(question)
            
            result = {
                'index': i,
                'question': question,
                'is_duplicate': is_dup,
                'similar_questions': [
                    {
                        'question': sim_q['question'],
                        'similarity': score,
                        'data_type': sim_q['data_type'],
                        'id': sim_q['id']
                    }
                    for sim_q, score in similar
                ],
                'max_similarity': max([score for _, score in similar], default=0.0)
            }
            results.append(result)
        
        return results
