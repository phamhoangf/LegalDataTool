import React, { useState, useEffect } from 'react';
import {
  Card,
  Button,
  Select,
  Table,
  Space,
  message,
  Tag,
  Alert,
  Descriptions,
  Row,
  Col,
  Statistic,
  Divider
} from 'antd';
import {
  DownloadOutlined,
  FileTextOutlined,
  CheckCircleOutlined,
  InfoCircleOutlined
} from '@ant-design/icons';
import apiService from '../services/api';

const { Option } = Select;const DataExport = () => {
  const [topics, setTopics] = useState([]);
  const [selectedTopic, setSelectedTopic] = useState(null);
  const [dataType, setDataType] = useState('word_matching');
  const [dataPreview, setDataPreview] = useState([]);
  const [stats, setStats] = useState(null);
  const [loading, setLoading] = useState(false);
  const [exporting, setExporting] = useState(false);

  useEffect(() => {
    loadTopics();
    loadStats();
  }, []);

  useEffect(() => {
    if (selectedTopic) {
      loadDataPreview();
    }
  }, [selectedTopic, dataType]);

  const loadTopics = async () => {
    try {
      const response = await apiService.getTopics();
      // L·∫•y t·∫•t c·∫£ topics, kh√¥ng filter
      setTopics(response.data);
    } catch (error) {
      message.error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch ch·ªß ƒë·ªÅ');
    }
  };

  const loadStats = async () => {
    try {
      const response = await apiService.getStatistics();
      setStats(response.data);
    } catch (error) {
      console.error('Error loading stats:', error);
    }
  };

  const loadDataPreview = async () => {
    try {
      setLoading(true);
      const response = await apiService.getGeneratedData(selectedTopic, dataType);
      // L·∫•y t·∫•t c·∫£ d·ªØ li·ªáu ƒë√£ c√≥ nh√£n ƒë·ªÉ preview
      const labeledData = response.data.filter(item => item.is_labeled);
      setDataPreview(labeledData);
    } catch (error) {
      message.error('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu preview');
      console.error('Error loading preview:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleExport = async () => {
    try {
      setExporting(true);
      
      const response = await apiService.exportData(dataType, selectedTopic);
      
      // T·∫°o URL ƒë·ªÉ download file
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement('a');
      link.href = url;
      
      // T·∫°o t√™n file
      const topicName = selectedTopic 
        ? topics.find(t => t.id === selectedTopic)?.name.replace(/\s+/g, '_')
        : 'all_topics';
      const timestamp = new Date().toISOString().slice(0, 19).replace(/[:-]/g, '');
      const filename = `${dataType}_${topicName}_${timestamp}.jsonl`;
      
      link.setAttribute('download', filename);
      document.body.appendChild(link);
      link.click();
      link.remove();
      window.URL.revokeObjectURL(url);
      
      message.success(`ƒê√£ xu·∫•t file: ${filename}`);
    } catch (error) {
      message.error('Kh√¥ng th·ªÉ xu·∫•t d·ªØ li·ªáu');
    } finally {
      setExporting(false);
    }
  };

  const renderPreviewContent = (item) => {
    const content = typeof item.content === 'string' ? JSON.parse(item.content) : item.content;
    
    const truncateText = (text, maxLength = 100) => {
      return text && text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
    };
    
    switch (item.data_type) {
      case 'word_matching':
        return (
          <div style={{ maxWidth: '400px', wordWrap: 'break-word' }}>
            <strong>C√¢u h·ªèi:</strong> {truncateText(content.question, 80)}<br />
            <strong>C√¢u tr·∫£ l·ªùi:</strong> {truncateText(content.answer, 80)}<br />
            {content.metadata?.source_document && (
              <><strong>Ngu·ªìn:</strong> {truncateText(content.metadata.source_document, 50)}<br /></>
            )}
          </div>
        );
      case 'concept_understanding':
        return (
          <div style={{ maxWidth: '400px', wordWrap: 'break-word' }}>
            <strong>C√¢u h·ªèi:</strong> {truncateText(content.question, 80)}<br />
            <strong>C√¢u tr·∫£ l·ªùi:</strong> {truncateText(content.answer, 80)}<br />
            <strong>Gi·∫£i th√≠ch:</strong> {truncateText(content.explanation, 60)}<br />
            {content.metadata?.source_documents && (
              <><strong>Ngu·ªìn:</strong> {truncateText(content.metadata.source_documents.join(', '), 50)}<br /></>
            )}
          </div>
        );
      case 'multi_paragraph_reading':
        return (
          <div style={{ maxWidth: '400px', wordWrap: 'break-word' }}>
            <strong>C√¢u h·ªèi:</strong> {truncateText(content.question, 80)}<br />
            <strong>C√¢u tr·∫£ l·ªùi:</strong> {truncateText(content.answer, 80)}<br />
            <strong>L√Ω do:</strong> {truncateText(content.reasoning, 60)}<br />
            {content.metadata?.source_documents && (
              <><strong>Ngu·ªìn:</strong> {truncateText(content.metadata.source_documents.join(', '), 50)}<br /></>
            )}
          </div>
        );
      case 'multi_hop_reasoning':
        return (
          <div style={{ maxWidth: '400px', wordWrap: 'break-word' }}>
            <strong>C√¢u h·ªèi:</strong> {truncateText(content.question, 80)}<br />
            <strong>C√¢u tr·∫£ l·ªùi:</strong> {truncateText(content.answer, 80)}<br />
            <strong>C√°c b∆∞·ªõc:</strong> {truncateText(content.reasoning_steps?.join(' ‚Üí '), 60)}<br />
            {content.metadata?.source_documents && (
              <><strong>Ngu·ªìn:</strong> {truncateText(content.metadata.source_documents.join(', '), 50)}<br /></>
            )}
          </div>
        );
      default:
        return <div style={{ maxWidth: '400px', wordWrap: 'break-word' }}>{truncateText(JSON.stringify(content), 100)}</div>;
    }
  };

  const previewColumns = [
    {
      title: 'ID',
      dataIndex: 'id',
      key: 'id',
      width: 80,
    },
    {
      title: 'Lo·∫°i',
      dataIndex: 'data_type',
      key: 'data_type',
      width: 80,
      render: (type) => (
        <Tag color={getDataTypeColor(type)}>
          {type.toUpperCase()}
        </Tag>
      ),
    },
    {
      title: 'N·ªôi dung',
      key: 'content',
      render: (_, record) => renderPreviewContent(record),
    },
    {
      title: 'Tr·∫°ng th√°i',
      key: 'status',
      width: 120,
      render: (_, record) => (
        <Tag color="green">
          <CheckCircleOutlined /> ƒê√£ duy·ªát
        </Tag>
      ),
    },
  ];

  const getExportableCount = () => {
    return dataPreview.length;
  };

  return (
    <div>
      <div className="page-header">
        <h1>Xu·∫•t D·ªØ Li·ªáu Hu·∫•n Luy·ªán</h1>
        <p>Xu·∫•t d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c g√°n nh√£n th√†nh file .jsonl ƒë·ªÉ hu·∫•n luy·ªán m√¥ h√¨nh</p>
      </div>

      {/* Th·ªëng k√™ t·ªïng quan */}
      <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>
        <Col xs={24} sm={8}>
          <Card>
            <Statistic
              title="T·ªïng D·ªØ Li·ªáu ƒê√£ Sinh"
              value={stats?.total_generated || 0}
              prefix={<FileTextOutlined />}
              valueStyle={{ color: '#1890ff' }}
            />
          </Card>
        </Col>
        <Col xs={24} sm={8}>
          <Card>
            <Statistic
              title="ƒê√£ G√°n Nh√£n"
              value={stats?.total_labeled || 0}
              prefix={<CheckCircleOutlined />}
              valueStyle={{ color: '#52c41a' }}
            />
          </Card>
        </Col>
        <Col xs={24} sm={8}>
          <Card>
            <Statistic
              title="S·∫µn S√†ng Xu·∫•t"
              value={stats?.label_distribution?.accept || 0}
              prefix={<DownloadOutlined />}
              valueStyle={{ color: '#722ed1' }}
            />
          </Card>
        </Col>
      </Row>

      {/* C·∫•u h√¨nh xu·∫•t */}
      <Card title="C·∫•u H√¨nh Xu·∫•t D·ªØ Li·ªáu" style={{ marginBottom: 24 }}>
        <Space direction="vertical" size="large" style={{ width: '100%' }}>
          <Row gutter={[16, 16]}>
            <Col xs={24} sm={12}>
              <div>
                <label style={{ display: 'block', marginBottom: 8, fontWeight: 'bold' }}>
                  Ch·ªçn Ch·ªß ƒê·ªÅ:
                </label>
                <div style={{ display: 'flex', gap: 8 }}>
                  <Select
                    placeholder="T·∫•t c·∫£ ch·ªß ƒë·ªÅ ho·∫∑c ch·ªçn ch·ªß ƒë·ªÅ c·ª• th·ªÉ"
                    style={{ flex: 1 }}
                    value={selectedTopic}
                    onChange={setSelectedTopic}
                    allowClear
                  >
                    {topics.map(topic => (
                      <Option key={topic.id} value={topic.id}>
                        {topic.name}
                      </Option>
                    ))}
                  </Select>
                  <Button 
                    onClick={loadTopics}
                    size="small"
                  >
                    üîÑ
                  </Button>
                </div>
              </div>
            </Col>
            
            <Col xs={24} sm={12}>
              <div>
                <label style={{ display: 'block', marginBottom: 8, fontWeight: 'bold' }}>
                  Lo·∫°i D·ªØ Li·ªáu:
                </label>
                <Select
                  style={{ width: '100%' }}
                  value={dataType}
                  onChange={setDataType}
                >
                  <Option value="word_matching">Word Matching - Kh·ªõp t·ª´ kh√≥a</Option>
                  <Option value="concept_understanding">Concept Understanding - Hi·ªÉu kh√°i ni·ªám</Option>
                  <Option value="multi_paragraph_reading">Multi Paragraph Reading - ƒê·ªçc hi·ªÉu ƒëa ƒëo·∫°n</Option>
                  <Option value="multi_hop_reasoning">Multi Hop Reasoning - Suy lu·∫≠n ƒëa b∆∞·ªõc</Option>
                </Select>
              </div>
            </Col>
          </Row>

          <Alert
            message="L∆∞u √Ω v·ªÅ ƒë·ªãnh d·∫°ng xu·∫•t"
            description={
              <div>
                <p>D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c xu·∫•t theo ƒë·ªãnh d·∫°ng JSONL (JSON Lines), m·ªói d√≤ng l√† m·ªôt object JSON.</p>
                <p>Ch·ªâ c√°c m·∫´u d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c g√°n nh√£n "Ch·∫•p nh·∫≠n" ho·∫∑c "ƒê√£ s·ª≠a" m·ªõi ƒë∆∞·ª£c xu·∫•t.</p>
                <p>File c√≥ th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng tr·ª±c ti·∫øp v·ªõi c√°c framework hu·∫•n luy·ªán nh∆∞ Transformers, OpenAI Fine-tuning, v.v.</p>
              </div>
            }
            type="info"
            showIcon
          />

          {selectedTopic && (
            <Descriptions title="Th√¥ng Tin Ch·ªß ƒê·ªÅ" bordered>
              <Descriptions.Item label="T√™n ch·ªß ƒë·ªÅ">
                {topics.find(t => t.id === selectedTopic)?.name}
              </Descriptions.Item>
              <Descriptions.Item label="M√¥ t·∫£">
                {topics.find(t => t.id === selectedTopic)?.description}
              </Descriptions.Item>
              <Descriptions.Item label="D·ªØ li·ªáu c√≥ th·ªÉ xu·∫•t">
                <Tag color="green">{getExportableCount()} m·∫´u</Tag>
              </Descriptions.Item>
            </Descriptions>
          )}

          <div style={{ textAlign: 'center', marginTop: 16 }}>
            <Space>
              <Button
                onClick={() => selectedTopic && loadDataPreview()}
                disabled={!selectedTopic}
              >
                üîÑ T·∫£i l·∫°i preview
              </Button>
              
              <Button
                type="primary"
                size="large"
                icon={<DownloadOutlined />}
                loading={exporting}
                onClick={handleExport}
                disabled={getExportableCount() === 0}
              >
                {exporting ? 'ƒêang Xu·∫•t...' : `Xu·∫•t ${getExportableCount()} M·∫´u D·ªØ Li·ªáu`}
              </Button>
            </Space>
          </div>
        </Space>
      </Card>

      {/* Preview d·ªØ li·ªáu */}
      {selectedTopic && (
        <Card 
          title={`Preview D·ªØ Li·ªáu S·∫Ω Xu·∫•t (${getExportableCount()} m·∫´u)`}
          extra={
            <Button 
              onClick={loadDataPreview}
              icon={<InfoCircleOutlined />}
            >
              T·∫£i L·∫°i
            </Button>
          }
        >
          {getExportableCount() > 0 ? (
            <Table
              columns={previewColumns}
              dataSource={dataPreview}
              rowKey="id"
              loading={loading}
              pagination={{ pageSize: 10 }}
              size="small"
              scroll={{ x: 800 }}
            />
          ) : (
            <div style={{ textAlign: 'center', padding: 40, color: '#999' }}>
              {selectedTopic 
                ? 'Ch∆∞a c√≥ d·ªØ li·ªáu n√†o ƒë∆∞·ª£c g√°n nh√£n "Ch·∫•p nh·∫≠n" cho ch·ªß ƒë·ªÅ n√†y'
                : 'Vui l√≤ng ch·ªçn ch·ªß ƒë·ªÅ ƒë·ªÉ xem preview'
              }
            </div>
          )}
        </Card>
      )}

      {/* H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng */}
      <Card title="H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng File Xu·∫•t" style={{ marginTop: 24 }}>
        <div>
          <h4>ƒê·ªãnh d·∫°ng Word Matching:</h4>
          <pre style={{ 
            background: '#f5f5f5', 
            padding: 12, 
            borderRadius: 4,
            overflowX: 'auto',
            whiteSpace: 'pre-wrap',
            wordWrap: 'break-word',
            fontSize: '12px'
          }}>
{`{"question": "ƒê·ªô tu·ªïi t·ªëi thi·ªÉu ƒë·ªÉ l√°i xe √¥ t√¥ l√† bao nhi√™u?", "answer": "18 tu·ªïi", "metadata": {"source_document": "Lu·∫≠t Giao th√¥ng"}}
{"question": "Ai c√≥ th·ªÉ c·∫•p gi·∫•y ph√©p l√°i xe?", "answer": "C∆° quan c√≥ th·∫©m quy·ªÅn", "metadata": {"source_document": "Ngh·ªã ƒë·ªãnh 12"}}`}
          </pre>

          <h4>ƒê·ªãnh d·∫°ng Concept Understanding:</h4>
          <pre style={{ 
            background: '#f5f5f5', 
            padding: 12, 
            borderRadius: 4,
            overflowX: 'auto',
            whiteSpace: 'pre-wrap',
            wordWrap: 'break-word',
            fontSize: '12px'
          }}>
{`{"question": "Kh√°i ni·ªám giao th√¥ng ƒë∆∞·ªùng b·ªô l√† g√¨?", "answer": "Ho·∫°t ƒë·ªông di chuy·ªÉn ng∆∞·ªùi, h√†ng h√≥a b·∫±ng ph∆∞∆°ng ti·ªán giao th√¥ng", "explanation": "ƒê·ªãnh nghƒ©a chi ti·∫øt v·ªÅ giao th√¥ng ƒë∆∞·ªùng b·ªô", "metadata": {"source_documents": ["Lu·∫≠t Giao th√¥ng", "Ngh·ªã ƒë·ªãnh 12"]}}
{"question": "Nguy√™n t·∫Øc c·∫•p gi·∫•y ph√©p l√°i xe?", "answer": "ƒê√∫ng tu·ªïi, ƒë·ªß s·ª©c kh·ªèe, c√≥ ki·∫øn th·ª©c", "explanation": "Gi·∫£i th√≠ch v·ªÅ c√°c ƒëi·ªÅu ki·ªán c·∫•p ph√©p", "metadata": {"source_documents": ["Lu·∫≠t Giao th√¥ng"]}}`}
          </pre>

          <h4>ƒê·ªãnh d·∫°ng Multi Paragraph Reading:</h4>
          <pre style={{ 
            background: '#f5f5f5', 
            padding: 12, 
            borderRadius: 4,
            overflowX: 'auto',
            whiteSpace: 'pre-wrap',
            wordWrap: 'break-word',
            fontSize: '12px'
          }}>
{`{"question": "So s√°nh ƒëi·ªÅu ki·ªán c·∫•p GPLX h·∫°ng A v√† h·∫°ng B", "answer": "H·∫°ng A: t·ª´ 16 tu·ªïi, H·∫°ng B: t·ª´ 18 tu·ªïi", "reasoning": "D·ª±a v√†o nhi·ªÅu ƒëi·ªÅu lu·∫≠t kh√°c nhau", "metadata": {"source_documents": ["Lu·∫≠t Giao th√¥ng", "Ngh·ªã ƒë·ªãnh 12", "Th√¥ng t∆∞ 58"]}}
{"question": "Quy tr√¨nh ƒë√†o t·∫°o v√† s√°t h·∫°ch l√°i xe", "answer": "ƒê√†o t·∫°o l√Ω thuy·∫øt ‚Üí th·ª±c h√†nh ‚Üí s√°t h·∫°ch", "reasoning": "T·ªïng h·ª£p t·ª´ c√°c quy ƒë·ªãnh v·ªÅ ƒë√†o t·∫°o", "metadata": {"source_documents": ["Ngh·ªã ƒë·ªãnh 12", "Th√¥ng t∆∞ 58"]}}`}
          </pre>

          <h4>ƒê·ªãnh d·∫°ng Multi Hop Reasoning:</h4>
          <pre style={{ 
            background: '#f5f5f5', 
            padding: 12, 
            borderRadius: 4,
            overflowX: 'auto',
            whiteSpace: 'pre-wrap',
            wordWrap: 'break-word',
            fontSize: '12px'
          }}>
{`{"question": "M·ªôt ng∆∞·ªùi 17 tu·ªïi mu·ªën l√°i xe c·∫ßn l√†m g√¨?", "answer": "Ch·ªù ƒë·ªß 18 tu·ªïi ho·∫∑c h·ªçc h·∫°ng A1", "reasoning_steps": ["Ki·ªÉm tra ƒë·ªô tu·ªïi", "Xem lo·∫°i xe mu·ªën l√°i", "T√¨m quy ƒë·ªãnh ph√π h·ª£p"], "metadata": {"source_documents": ["Lu·∫≠t Giao th√¥ng", "Ngh·ªã ƒë·ªãnh 12", "Th√¥ng t∆∞ 58"]}}
{"question": "Chi ph√≠ v√† th·ªùi gian ho√†n t·∫•t gi·∫•y ph√©p l√°i xe B1", "answer": "Kho·∫£ng 3-6 th√°ng, chi ph√≠ 8-12 tri·ªáu", "reasoning_steps": ["T√≠nh th·ªùi gian ƒë√†o t·∫°o", "C·ªông th·ªùi gian ch·ªù s√°t h·∫°ch", "T·ªïng h·ª£p chi ph√≠ c√°c kh√¢u"], "metadata": {"source_documents": ["Ngh·ªã ƒë·ªãnh 12", "Th√¥ng t∆∞ 58", "Quy·∫øt ƒë·ªãnh ph√≠"]}}`}
          </pre>

          <Divider />
          
          <Alert
            message="S·ª≠ d·ª•ng v·ªõi Python"
            description={
              <pre style={{ 
                margin: 0,
                overflowX: 'auto',
                whiteSpace: 'pre-wrap',
                wordWrap: 'break-word',
                fontSize: '12px'
              }}>
{`import jsonlines

# ƒê·ªçc file JSONL cho Word Matching
with jsonlines.open('word_matching_data.jsonl') as reader:
    for obj in reader:
        print(f"Q: {obj['question']}")
        print(f"A: {obj['answer']}")
        
# ƒê·ªçc file JSONL cho Multi Hop Reasoning  
with jsonlines.open('multi_hop_reasoning_data.jsonl') as reader:
    for obj in reader:
        print(f"Q: {obj['question']}")
        print(f"Steps: {' ‚Üí '.join(obj['reasoning_steps'])}")
        print(f"A: {obj['answer']}")

# Ho·∫∑c v·ªõi pandas
import pandas as pd
df = pd.read_json('word_matching_data.jsonl', lines=True)`}
              </pre>
            }
            type="info"
          />
        </div>
      </Card>
    </div>
  );
};

const getDataTypeColor = (type) => {
  switch (type) {
    case 'word_matching': return 'blue';
    case 'concept_understanding': return 'green';
    case 'multi_paragraph_reading': return 'purple';
    case 'multi_hop_reasoning': return 'orange';
    default: return 'default';
  }
};

export default DataExport;
