import React, { useState, useEffect } from 'react';
import { Card, Row, Col, Statistic, Timeline, Alert, Spin, Button } from 'antd';
import {
  FolderOutlined,
  DatabaseOutlined,
  TagsOutlined,
  CheckCircleOutlined,
  ClockCircleOutlined
} from '@ant-design/icons';
import apiService from '../services/api';

const HomePage = () => {
  const [stats, setStats] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    loadStatistics();
  }, []);

  const loadStatistics = async () => {
    try {
      setLoading(true);
      const response = await apiService.getStatistics();
      setStats(response.data);
      setError(null);
    } catch (err) {
      setError('Kh√¥ng th·ªÉ t·∫£i th·ªëng k√™. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi API.');
      console.error('Error loading statistics:', err);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div style={{ textAlign: 'center', padding: '50px' }}>
        <Spin size="large" />
        <p style={{ marginTop: 16 }}>ƒêang t·∫£i d·ªØ li·ªáu...</p>
      </div>
    );
  }

  if (error) {
    return <Alert message="L·ªói" description={error} type="error" showIcon />;
  }

  return (
    <div>
      <div className="page-header">
        <h1>Dashboard - Tool T·∫°o D·ªØ Li·ªáu LegalSLM</h1>
        <p>Ch√†o m·ª´ng ƒë·∫øn v·ªõi c√¥ng c·ª• t·∫°o d·ªØ li·ªáu finetune cho m√¥ h√¨nh LegalSLM</p>
        <Button onClick={loadStatistics} style={{ marginTop: 8 }}>
          üîÑ C·∫≠p nh·∫≠t th·ªëng k√™
        </Button>
      </div>

      <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>
        <Col xs={24} sm={12} lg={6}>
          <Card>
            <Statistic
              title="T·ªïng Ch·ªß ƒê·ªÅ"
              value={stats?.total_topics || 0}
              prefix={<FolderOutlined />}
              valueStyle={{ color: '#3f8600' }}
            />
          </Card>
        </Col>
        <Col xs={24} sm={12} lg={6}>
          <Card>
            <Statistic
              title="D·ªØ Li·ªáu ƒê√£ Sinh"
              value={stats?.total_generated || 0}
              prefix={<DatabaseOutlined />}
              valueStyle={{ color: '#1890ff' }}
            />
          </Card>
        </Col>
        <Col xs={24} sm={12} lg={6}>
          <Card>
            <Statistic
              title="ƒê√£ G√°n Nh√£n"
              value={stats?.total_labeled || 0}
              prefix={<TagsOutlined />}
              valueStyle={{ color: '#722ed1' }}
            />
          </Card>
        </Col>
        <Col xs={24} sm={12} lg={6}>
          <Card>
            <Statistic
              title="T·ª∑ L·ªá Ho√†n Th√†nh"
              value={stats?.total_generated > 0 ? Math.round((stats?.total_labeled / stats?.total_generated) * 100) : 0}
              suffix="%"
              prefix={<CheckCircleOutlined />}
              valueStyle={{ color: '#cf1322' }}
            />
          </Card>
        </Col>
      </Row>

      <Row gutter={[16, 16]}>
        <Col xs={24} lg={12}>
          <Card title="Ph√¢n B·ªë Lo·∫°i D·ªØ Li·ªáu" bordered={false}>
            {stats?.data_type_distribution ? (
              <div>
                {Object.entries(stats.data_type_distribution).map(([type, count]) => (
                  <div key={type} style={{ marginBottom: 8 }}>
                    <strong>{type.toUpperCase()}:</strong> {count} m·∫´u
                  </div>
                ))}
              </div>
            ) : (
              <p>Ch∆∞a c√≥ d·ªØ li·ªáu</p>
            )}
          </Card>
        </Col>
        
        <Col xs={24} lg={12}>
          <Card title="Tr·∫°ng Th√°i G√°n Nh√£n" bordered={false}>
            {stats?.label_distribution ? (
              <div>
                {Object.entries(stats.label_distribution).map(([label, count]) => (
                  <div key={label} style={{ marginBottom: 8 }}>
                    <strong>{getLabelText(label)}:</strong> {count} m·∫´u
                  </div>
                ))}
              </div>
            ) : (
              <p>Ch∆∞a c√≥ d·ªØ li·ªáu g√°n nh√£n</p>
            )}
          </Card>
        </Col>
      </Row>

      <Row gutter={[16, 16]} style={{ marginTop: 24 }}>
        <Col span={24}>
          <Card title="Quy Tr√¨nh S·ª≠ D·ª•ng" bordered={false}>
            <Timeline
              items={[
                {
                  color: 'green',
                  icon: <FolderOutlined />,
                  children: 'T·∫°o ch·ªß ƒë·ªÅ ph√°p l√Ω v√† t·∫£i l√™n vƒÉn b·∫£n lu·∫≠t li√™n quan',
                },
                {
                  color: 'blue',
                  icon: <DatabaseOutlined />,
                  children: 'Sinh d·ªØ li·ªáu hu·∫•n luy·ªán (Word Matching, Concept Understanding, Multi Paragraph Reading, Multi Hop Reasoning) d·ª±a tr√™n vƒÉn b·∫£n lu·∫≠t',
                },
                {
                  color: 'purple',
                  icon: <TagsOutlined />,
                  children: 'Chuy√™n gia lu·∫≠t duy·ªát v√† g√°n nh√£n cho d·ªØ li·ªáu ƒë√£ sinh',
                },
                {
                  color: 'orange',
                  icon: <CheckCircleOutlined />,
                  children: 'Xu·∫•t d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c g√°n nh√£n th√†nh file .jsonl ƒë·ªÉ hu·∫•n luy·ªán',
                },
              ]}
            />
          </Card>
        </Col>
      </Row>

      <Row gutter={[16, 16]} style={{ marginTop: 24 }}>
        <Col span={24}>
          <Alert
            message="H∆∞·ªõng D·∫´n Nhanh"
            description={
              <div>
                <p><strong>B∆∞·ªõc 1:</strong> V√†o "Qu·∫£n l√Ω ch·ªß ƒë·ªÅ" ƒë·ªÉ t·∫°o ch·ªß ƒë·ªÅ m·ªõi v√† t·∫£i l√™n vƒÉn b·∫£n lu·∫≠t</p>
                <p><strong>B∆∞·ªõc 2:</strong> V√†o "Sinh d·ªØ li·ªáu" ƒë·ªÉ t·∫°o c√°c m·∫´u d·ªØ li·ªáu hu·∫•n luy·ªán</p>
                <p><strong>B∆∞·ªõc 3:</strong> V√†o "Duy·ªát d·ªØ li·ªáu" ƒë·ªÉ duy·ªát v√† ch·ªânh s·ª≠a d·ªØ li·ªáu</p>
                <p><strong>B∆∞·ªõc 4:</strong> V√†o "Xu·∫•t d·ªØ li·ªáu" ƒë·ªÉ t·∫£i v·ªÅ file .jsonl ho√†n ch·ªânh</p>
              </div>
            }
            type="info"
            showIcon
          />
        </Col>
      </Row>
    </div>
  );
};

const getLabelText = (label) => {
  switch (label) {
    case 'accept': return 'Ch·∫•p nh·∫≠n';
    case 'reject': return 'T·ª´ ch·ªëi';
    case 'modify': return 'ƒê√£ s·ª≠a';
    default: return label;
  }
};

export default HomePage;
